project: ./projects/cifar10

trainer:
    _target_: pytorch_lightning.Trainer
    max_epochs: 100
    accelerator: gpu
    devices: 1
    # strategy: ddp
    log_every_n_steps: 10
    logger: null
    callbacks:
        - _target_: lighter.callbacks.LighterLogger
          project: CIFAR10
          log_dir: "$@project + '/logs' "
          tensorboard: True
          wandb: True
          input_type: image
          max_samples: 10

        - _target_: lighter.callbacks.LighterWriter
          write_dir: "$@project + '/predictions' "
          write_as: "tensor"
          write_on: "epoch" # "step"

system:
    _target_: lighter.LighterSystem
    batch_size: 512
    pin_memory: True
    num_workers: 2

    model:
        _target_: "project.models.net.Net"

    # model:
    #     _target_: monai.networks.nets.EfficientNetBN
    #     model_name: efficientnet-b0
    #     pretrained: False
    #     spatial_dims: 2
    #     in_channels: 3
    #     num_classes: 10

    criterion:
        _target_: torch.nn.CrossEntropyLoss

    optimizers:
        _target_: torch.optim.Adam
        params: "$@system#model.parameters()"
        lr: 0.001
        weight_decay: 0.00001

    train_metrics:
        - _target_: torchmetrics.Accuracy
          task: multiclass
          num_classes: 10
          average: macro
        - _target_: torchmetrics.F1Score
          task: multiclass
          num_classes: 10
          average: macro
        - _target_: torchmetrics.Precision
          task: multiclass
          num_classes: 10
          average: macro
        - _target_: torchmetrics.Recall
          task: multiclass
          num_classes: 10
          average: macro

    val_metrics: "%system#train_metrics"

    test_metrics: "%system#train_metrics"

    train_dataset:
        _target_: torchvision.datasets.CIFAR10
        download: True
        root: ./.datasets/
        train: True
        transform:
            _target_: torchvision.transforms.Compose
            transforms:
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.Normalize
                  mean: [0.5, 0.5, 0.5]
                  std: [0.5, 0.5, 0.5]
        target_transform: null
    
    val_dataset:
        _target_: torchvision.datasets.CIFAR10
        download: False
        root: ./.datasets/
        train:  False  # Same as test, for prototyping purposes only
        transform:
            _target_: torchvision.transforms.Compose
            transforms:
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.Normalize
                  mean: [0.5, 0.5, 0.5]
                  std: [0.5, 0.5, 0.5]
        target_transform: null
    
    test_dataset:
        _target_: torchvision.datasets.CIFAR10
        download: False
        root: ./.datasets/
        train: False
        transform:
            _target_: torchvision.transforms.Compose
            transforms:
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.Normalize
                  mean: [0.5, 0.5, 0.5]
                  std: [0.5, 0.5, 0.5]
        target_transform: null

    predict_dataset: "%system#test_dataset"
