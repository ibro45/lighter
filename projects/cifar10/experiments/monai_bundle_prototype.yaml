project: ./projects/cifar10

trainer:
    _target_: pytorch_lightning.Trainer
    max_epochs: 100
    accelerator: cpu
    # devices: 1  # 2
    # strategy: ddp
    log_every_n_steps: 10
    logger: False
    callbacks:
        - _target_: lighter.callbacks.LighterFileWriter
          directory: '$f"{@project}/predictions"'
          writer: tensor

system:
    _target_: lighter.LighterSystem
    batch_size: 512
    pin_memory: True
    num_workers: 2

    model:
        _target_: "project.models.net.Net"

    # model:
    #     _target_: monai.networks.nets.EfficientNetBN
    #     model_name: efficientnet-b0
    #     pretrained: False
    #     spatial_dims: 2
    #     in_channels: 3
    #     num_classes: 10

    criterion:
        _target_: torch.nn.CrossEntropyLoss

    optimizer:
        _target_: torch.optim.Adam
        params: "$@system#model.parameters()"
        lr: 0.001
        weight_decay: 0.00001

    metrics:
        train:
            - _target_: torchmetrics.Accuracy
              task: multiclass
              num_classes: 10
              average: macro
            - _target_: torchmetrics.F1Score
              task: multiclass
              num_classes: 10
              average: macro
            - _target_: torchmetrics.Precision
              task: multiclass
              num_classes: 10
              average: macro
            - _target_: torchmetrics.Recall
              task: multiclass
              num_classes: 10
              average: macro
        val: "%#train"
        test: "%#train"

    datasets:
        train:
            _target_: torchvision.datasets.CIFAR10
            download: True
            root: ./.datasets/
            train: True
            transform:
                _target_: torchvision.transforms.Compose
                transforms:
                    - _target_: torchvision.transforms.ToTensor
                    - _target_: torchvision.transforms.Normalize
                      mean: [0.5, 0.5, 0.5]
                      std: [0.5, 0.5, 0.5]
            target_transform: null
  
        val:
          _target_: torchvision.datasets.CIFAR10
          download: True
          root: ./.datasets/
          train:  False  # Same as test, for prototyping purposes only
          transform:
              _target_: torchvision.transforms.Compose
              transforms:
                  - _target_: torchvision.transforms.ToTensor
                  - _target_: torchvision.transforms.Normalize
                    mean: [0.5, 0.5, 0.5]
                    std: [0.5, 0.5, 0.5]
          target_transform: null

        test:
          _target_: torchvision.datasets.CIFAR10
          download: True
          root: ./.datasets/
          train: False
          transform:
              _target_: torchvision.transforms.Compose
              transforms:
                  - _target_: torchvision.transforms.ToTensor
                  - _target_: torchvision.transforms.Normalize
                    mean: [0.5, 0.5, 0.5]
                    std: [0.5, 0.5, 0.5]
          target_transform: null

        predict: "%#test"
    
    postprocessing:
        # Format the batch as required by Lighter
        batch:
            train: '$lambda x: {"input": x[0], "target": x[1]}'
            val: "%#train"
            test: "%#train"
            predict: "%#train"
